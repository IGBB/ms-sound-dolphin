#+TITLE: Mito Control Region
#+PROPERTY:  header-args :var DIR=(file-name-directory buffer-file-name)


* Vollmer mtCR sequences
- Outgroup
  #+name: outgroup
  | DQ060054 | S. frontalis | Adams and Rosel 2006 |
  | DQ060057 | S. frontalis | Adams and Rosel 2006 |
- Sources
  - Vollmer and Rosel 2017
    [[./vollmer_2017.online_resource_7.tsv]]
    [[./vollmer_2017.online_resource_16.tsv]]

    #+NAME: vollmer2017-color    
      | Population | Color   |
      |------------+---------|
      | NW inner   | #98d4ed |
      | NW outer   | #bebfbf |
      | NW oceanic | #e0e47e |
      | E inner    | #f5c89b |
      | E outer    | #e67383 |
      | E oceanic  | #c7a3c7 |
      | NE oceanic | #99c796 |

  - Vollmer et al 2021
    [[./vollmer_2021.SI-table-3.tsv]]
    [[./vollmer_2021.SI-table-4.tsv]]

      #+NAME: vollmer2021-color    
      | Population               | Color   |
      |--------------------------+---------|
      | Entire green pop (n=541) | #669e40 |
      | Entire blue pop (n=42)   | #2f5597 |



1) Download sequences from NCBI to [[./vollmer.samples.fa]]
   #+begin_src sh
ROOT=$(git rev-parse --show-toplevel)
cat <(grep -v '^#' vollmer_2017.online_resource_7.tsv | cut -f 4 ) \
    <(grep -v '^#' vollmer_2021.SI-table-4.tsv | cut -f 7) |
    sort -u |
    ~/.local/edirect/efetch -db nuccore -format fasta > $DIR/vollmer.samples.fa
   #+end_src

* With Outgroup
:PROPERTIES:
:header-args:R: :session mtCR :results output verbatim
:END:

** Align
Combine datasets and trim names (includes the two outliers). Align with mafft
   #+begin_src tmux :session dolphin:local
ROOT=$(git rev-parse --show-toplevel)
DIR=$ROOT/4-mtCR/

cat $DIR/vollmer.samples.fa \
    $ROOT/3-assemble/mtCR.fa \
    $DIR/outgroup.fa |
    sed '/>/s/ .*//' |
    $ROOT/apps/mafft-7.520/mafft.bat --auto --thread 4  \
        /dev/stdin > $DIR/1-mafft.fasta
   #+end_src
** Load libraries
#+begin_src R :results silent
library(adegenet)
library(haplotypes)
library(LEA)
library(tidyverse)
library(ape)
library(tidytree)
library(ggtree)
library(Biostrings)
library(hues)
library(hierfstat)
library(poppr)
library(ascii)
op <- options(asciiType = "org")

library(aplot)
options(width = 70)

#+end_src

#+begin_src R
sessionInfo()
#+end_src

#+RESULTS:
#+begin_example
R version 4.2.2 (2022-10-31)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Rocky Linux 9.1 (Blue Onyx)

Matrix products: default
BLAS:   /apps/spack-managed/gcc-11.3.1/r-4.2.2-34ublnqh75jvi4k4dfkvbfrz2ivdmfvm/rlib/R/lib/libRblas.so
LAPACK: /apps/spack-managed/gcc-11.3.1/r-4.2.2-34ublnqh75jvi4k4dfkvbfrz2ivdmfvm/rlib/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats4    stats     graphics  grDevices utils     datasets
[7] methods   base

other attached packages:
 [1] poppr_2.9.6         hierfstat_0.5-11    aplot_0.2.1
 [4] ascii_2.4           hues_0.2.0          Biostrings_2.66.0
 [7] GenomeInfoDb_1.34.9 XVector_0.38.0      IRanges_2.32.0
[10] S4Vectors_0.36.2    BiocGenerics_0.44.0 ggtree_3.6.2
[13] tidytree_0.4.5      ape_5.7-1           lubridate_1.9.2
[16] forcats_1.0.0       stringr_1.5.1       dplyr_1.1.4
[19] purrr_1.0.2         readr_2.1.4         tidyr_1.3.1
[22] tibble_3.2.1        ggplot2_3.5.1.9000  tidyverse_2.0.0
[25] LEA_3.10.2          haplotypes_1.1.3.1  adegenet_2.1.10
[28] ade4_1.7-22

loaded via a namespace (and not attached):
 [1] colorspace_2.1-0       seqinr_4.2-36
 [3] ellipsis_0.3.2         fs_1.6.3
 [5] farver_2.1.2           fansi_1.0.6
 [7] codetools_0.2-19       splines_4.2.2
 [9] cachem_1.0.8           pegas_1.3
[11] jsonlite_1.8.7         cluster_2.1.6
[13] shiny_1.7.5.1          compiler_4.2.2
[15] Matrix_1.6-1.1         fastmap_1.1.1
[17] lazyeval_0.2.2         cli_3.6.2
[19] later_1.3.1            htmltools_0.5.6
[21] tools_4.2.2            igraph_2.0.3
[23] coda_0.19-4.1          gtable_0.3.5
[25] glue_1.7.0             GenomeInfoDbData_1.2.9
[27] reshape2_1.4.4         fastmatch_1.1-4
[29] Rcpp_1.0.11            statnet.common_4.9.0
[31] vctrs_0.6.5            nlme_3.1-163
[33] network_1.18.2         timechange_0.2.0
[35] mime_0.12              lifecycle_1.0.4
[37] phangorn_2.11.1        MASS_7.3-60
[39] zlibbioc_1.44.0        scales_1.3.0
[41] hms_1.1.3              promises_1.2.1
[43] parallel_4.2.2         memoise_2.0.1
[45] ggfun_0.1.3            yulab.utils_0.1.0
[47] stringi_1.8.4          plotrix_3.8-4
[49] permute_0.9-7          boot_1.3-30
[51] rlang_1.1.3            pkgconfig_2.0.3
[53] bitops_1.0-7           polysat_1.7-7
[55] lattice_0.21-8         treeio_1.22.0
[57] patchwork_1.2.0.9000   labeling_0.4.3
[59] cowplot_1.1.1          tidyselect_1.2.1
[61] plyr_1.8.8             magrittr_2.0.3
[63] R6_2.5.1               generics_0.1.3
[65] sna_2.7-2              pillar_1.9.0
[67] withr_3.0.0            mgcv_1.9-0
[69] survival_3.5-7         RCurl_1.98-1.12
[71] crayon_1.5.2           utf8_1.2.4
[73] tzdb_0.4.0             grid_4.2.2
[75] vegan_2.6-6.1          digest_0.6.33
[77] xtable_1.8-4           httpuv_1.6.12
[79] gridGraphics_0.5-1     munsell_0.5.1
[81] ggplotify_0.1.2        quadprog_1.5-8
#+end_example

** Load metadata and color
#+begin_src R :results silent
colors <- list("2017"=c("NW.inner"="#98d4ed",
                        "E.inner"  =  "#f5c89b",
                        "NW.outer" =  "#bebfbf",
                        "E.outer"  =  "#e67383",
                        "NW.Oceanic"= "#e0e47e",
                        "E.oceanic" = "#c7a3c7",
                        "NE.oceanic"= "#99c796"),
               "2021"=c("green" =  "#669e40",
                        "blue"  =  "#2f5597"))

meta.counts <- mapply(left_join,
       list("2017"="vollmer_2017.online_resource_16.tsv",
       "2021"="vollmer_2021.SI-table-3.tsv") %>%
       lapply(read.delim, comment.char = '#') %>%
       lapply(gather, -Haplotype, key="Group", value='count') %>%
       lapply(select, Haplotype, Group, count),
       list("2017"="vollmer_2017.online_resource_7.tsv",
            "2021"="vollmer_2021.SI-table-4.tsv") %>%
       lapply(read.delim,sep="\t", skip=8) %>%
       lapply(select, Haplotype, "ID"=starts_with("GenBank")),
       SIMPLIFY = F) %>%
  bind_rows(.id="Set") %>%
  unique %>%
  mutate(ID=paste0(ID, ".1")) %>%
  filter(!grepl("Green.pop.subset", Group ) & count > 0) %>%
  mutate(Group = sub("Entire.(green|blue).pop.*", "\\1", Group))


#+end_src

** Load and trim alignment (w/ outgroup)
#+begin_src R
fasta.with_outgroup <-
  read.dna("1-mafft.fasta", format='fasta', as.matrix=T)
fasta.with_outgroup
#+end_src

#+RESULTS:
#+begin_example
511 DNA sequences in binary format stored in a matrix.

All sequences of same length: 491

Labels:
AY997307.1
AY997308.1
AY997309.1
AY997310.1
AY997311.1
DQ845448.1
...

Base composition:
    a     c     g     t
0.333 0.221 0.111 0.335
(Total: 250.9 kb)
#+end_example

#+HEADER: :results output graphics file :file alignment.outliers.png
#+HEADER: :width 1600 :height 600 :bg white
#+begin_src R
image.DNAbin(fasta.with_outgroup)
#+end_src

#+RESULTS:
[[file:alignment.outliers.png]]

Removing gaps at the start and end of the alignments
#+begin_src R
gap.counts = colSums(as.character(fasta.with_outgroup) == "-")
trim.range = range(which(gap.counts==0))

fasta.with_outgroup.trimmed =
  fasta.with_outgroup[,seq(trim.range[1], trim.range[2])]

fasta.with_outgroup.trimmed
#+end_src

#+RESULTS:
#+begin_example
511 DNA sequences in binary format stored in a matrix.

All sequences of same length: 354

Labels:
AY997307.1
AY997308.1
AY997309.1
AY997310.1
AY997311.1
DQ845448.1
...

Base composition:
    a     c     g     t
0.329 0.208 0.099 0.363
(Total: 180.89 kb)
#+end_example

Fix ambiguous bases
#+begin_src R
fasta.with_outgroup.trimmed.fixed <-
  solveAmbiguousBases(fasta.with_outgroup.trimmed)
fasta.with_outgroup.trimmed.fixed
#+end_src

#+RESULTS:
#+begin_example
511 DNA sequences in binary format stored in a matrix.

All sequences of same length: 354

Labels:
AY997307.1
AY997308.1
AY997309.1
AY997310.1
AY997311.1
DQ845448.1
...

Base composition:
    a     c     g     t
0.329 0.208 0.099 0.363
(Total: 180.89 kb)
#+end_example

Write trimmed fasta file
#+begin_src R :results silent
write.FASTA(fasta.with_outgroup.trimmed, "1-mafft.trimmed.fasta")
write.FASTA(fasta.with_outgroup.trimmed.fixed,
            "1-mafft.trimmed.fixed.fasta")
#+end_src

** Haplotypes

#+begin_src R
haplotypes.with_outgroup <-
  fasta.with_outgroup.trimmed.fixed %>%
  as.dna %>%
  haplotype(indel='missing')

haplotypes.with_outgroup@freq %>%
  table %>%
  as.data.frame %>%
  setNames(c("Size", "Count")) %>%
  mutate(Size = as.character(Size)) %>%
  rbind(., c("Total", sum(.$Count)))
#+end_src

#+RESULTS:
#+begin_example
Size Count
1      1    52
2      2     7
3      3     4
4      4     3
5      5     1
6      9     1
7     12     1
8     23     1
9     50     1
10    54     1
11    70     1
12   198     1
13 Total    74
#+end_example

Rename haplotypes mtCR-new, mtCR-mix, and mtCR-pub for haplotypes containing only new sequences, mix of published and new, and only published.
#+begin_src R :results silent
haplotypes.new_names <-
  haplotypes.with_outgroup@haplist %>%
  lapply(as.data.frame) %>%
  bind_rows(.id='name') %>%
  setNames(c("Haplotype", "Sample")) %>%
  group_by(Haplotype) %>%
  mutate(New = as.numeric(any(grepl('^SER', Sample))),
         Pub = as.numeric(any(!grepl('^SER', Sample))) * 2,
         Out = any((Sample %in% c("DQ060054.1", "DQ060057.1")))) %>%
  mutate(NewName = as.character(factor(New+Pub, 1:3,
                                       labels = c("mtCR.new",
                                                  "mtCR.pub",
                                                  "mtCR.mix")))) %>%
  mutate(NewName = ifelse(Out, "mtCR.out", NewName),
         Size=n()) %>%
  select(Haplotype, NewName, Size) %>%
  unique() %>%
  rowid_to_column("tmp") %>%
  arrange(desc(Size)) %>%
  group_by(NewName) %>%
  mutate(NewName = sprintf("%s-%d", NewName, row_number())) %>%
  arrange(tmp) %>%
  select(-tmp)
haplotypes.new_names

names(haplotypes.with_outgroup@hapind) <- haplotypes.new_names$NewName
names(haplotypes.with_outgroup@haplist) <- haplotypes.new_names$NewName
rownames(haplotypes.with_outgroup@sequence) <-
  haplotypes.new_names$NewName
#+end_src

Write fasta
#+begin_src R :results silent
haplotypes.with_outgroup@sequence %>%
  as.DNAbin %>%
  write.FASTA("2-haplotypes.with_outgroup.fixed.fasta")

haplotypes.with_outgroup@sequence[
  !grepl("mtCR.out", names(haplotypes.with_outgroup@haplist)),
  ] %>%
  as.DNAbin %>%
  write.FASTA("2-haplotypes.without_outgroup.fixed.fasta")
#+end_src


Number and Size range of each type of haplotype
#+begin_src R :results drawer
data.frame(Haplotype=names(haplotypes.with_outgroup@hapind),
           Size = haplotypes.with_outgroup@freq) %>%
  mutate(Haplotype = sub('-.*', '', Haplotype)) %>%
  group_by(Haplotype) %>%
  summarise(Count = n(),
            Range = sprintf("[%d - %d]",
                            min(Size),
                            max(Size)),
            .groups='drop') %>%
  ascii(digit=0, include.rownames=F)
#+end_src

#+RESULTS:
:results:
| Haplotype | Count | Range     |
|-----------+-------+-----------|
| mtCR.mix  |    12 | [2 - 198] |
| mtCR.new  |     8 | [1 - 3]   |
| mtCR.out  |     2 | [1 - 1]   |
| mtCR.pub  |    52 | [1 - 4]   |
:end:

Published vs New haplotype overlap
  #+begin_src R :results output drawer
haplotypes.with_outgroup@haplist %>%
  lapply(as.data.frame) %>%
  bind_rows(.id='name') %>%
  setNames(c("Haplotype", "Sample")) %>%
  group_by(Haplotype) %>%
  summarise(New = sum(grepl('^SER', Sample)),
            Pub = sum(!grepl('^SER', Sample)),
            Total = n()) %>%
  mutate(Haplotype = ifelse(Pub==0,
                            sprintf("*%s*", Haplotype),
                            Haplotype)) %>%
  arrange(desc(Total)) %>%
  ascii(digit=0, include.rownames=F)

  #+end_src

  #+RESULTS:
  :results:
  | Haplotype   | New | Pub | Total |
  |-------------+-----+-----+-------|
  | mtCR.mix-1  | 190 |   8 |   198 |
  | mtCR.mix-2  |  65 |   5 |    70 |
  | mtCR.mix-3  |  46 |   8 |    54 |
  | mtCR.mix-4  |  40 |  10 |    50 |
  | mtCR.mix-5  |  22 |   1 |    23 |
  | mtCR.mix-6  |  11 |   1 |    12 |
  | mtCR.mix-7  |   8 |   1 |     9 |
  | mtCR.mix-8  |   4 |   1 |     5 |
  | mtCR.mix-9  |   3 |   1 |     4 |
  | mtCR.pub-1  |   0 |   4 |     4 |
  | mtCR.pub-2  |   0 |   4 |     4 |
  | mtCR.mix-10 |   1 |   2 |     3 |
  | *mtCR.new-1*  |   3 |   0 |     3 |
  | mtCR.pub-3  |   0 |   3 |     3 |
  | mtCR.pub-4  |   0 |   3 |     3 |
  | mtCR.mix-11 |   1 |   1 |     2 |
  | mtCR.mix-12 |   1 |   1 |     2 |
  | *mtCR.new-2*  |   2 |   0 |     2 |
  | mtCR.pub-5  |   0 |   2 |     2 |
  | mtCR.pub-6  |   0 |   2 |     2 |
  | mtCR.pub-7  |   0 |   2 |     2 |
  | mtCR.pub-8  |   0 |   2 |     2 |
  | *mtCR.new-3*  |   1 |   0 |     1 |
  | *mtCR.new-4*  |   1 |   0 |     1 |
  | *mtCR.new-5*  |   1 |   0 |     1 |
  | *mtCR.new-6*  |   1 |   0 |     1 |
  | *mtCR.new-7*  |   1 |   0 |     1 |
  | *mtCR.new-8*  |   1 |   0 |     1 |
  | mtCR.out-1  |   0 |   1 |     1 |
  | mtCR.out-2  |   0 |   1 |     1 |
  | mtCR.pub-10 |   0 |   1 |     1 |
  | mtCR.pub-11 |   0 |   1 |     1 |
  | mtCR.pub-12 |   0 |   1 |     1 |
  | mtCR.pub-13 |   0 |   1 |     1 |
  | mtCR.pub-14 |   0 |   1 |     1 |
  | mtCR.pub-15 |   0 |   1 |     1 |
  | mtCR.pub-16 |   0 |   1 |     1 |
  | mtCR.pub-17 |   0 |   1 |     1 |
  | mtCR.pub-18 |   0 |   1 |     1 |
  | mtCR.pub-19 |   0 |   1 |     1 |
  | mtCR.pub-20 |   0 |   1 |     1 |
  | mtCR.pub-21 |   0 |   1 |     1 |
  | mtCR.pub-22 |   0 |   1 |     1 |
  | mtCR.pub-23 |   0 |   1 |     1 |
  | mtCR.pub-24 |   0 |   1 |     1 |
  | mtCR.pub-25 |   0 |   1 |     1 |
  | mtCR.pub-26 |   0 |   1 |     1 |
  | mtCR.pub-27 |   0 |   1 |     1 |
  | mtCR.pub-28 |   0 |   1 |     1 |
  | mtCR.pub-29 |   0 |   1 |     1 |
  | mtCR.pub-30 |   0 |   1 |     1 |
  | mtCR.pub-31 |   0 |   1 |     1 |
  | mtCR.pub-32 |   0 |   1 |     1 |
  | mtCR.pub-33 |   0 |   1 |     1 |
  | mtCR.pub-34 |   0 |   1 |     1 |
  | mtCR.pub-35 |   0 |   1 |     1 |
  | mtCR.pub-36 |   0 |   1 |     1 |
  | mtCR.pub-37 |   0 |   1 |     1 |
  | mtCR.pub-38 |   0 |   1 |     1 |
  | mtCR.pub-39 |   0 |   1 |     1 |
  | mtCR.pub-40 |   0 |   1 |     1 |
  | mtCR.pub-41 |   0 |   1 |     1 |
  | mtCR.pub-42 |   0 |   1 |     1 |
  | mtCR.pub-43 |   0 |   1 |     1 |
  | mtCR.pub-44 |   0 |   1 |     1 |
  | mtCR.pub-45 |   0 |   1 |     1 |
  | mtCR.pub-46 |   0 |   1 |     1 |
  | mtCR.pub-47 |   0 |   1 |     1 |
  | mtCR.pub-48 |   0 |   1 |     1 |
  | mtCR.pub-49 |   0 |   1 |     1 |
  | mtCR.pub-50 |   0 |   1 |     1 |
  | mtCR.pub-51 |   0 |   1 |     1 |
  | mtCR.pub-52 |   0 |   1 |     1 |
  | mtCR.pub-9  |   0 |   1 |     1 |
  :end:

  Sequence differences between mtCR.new haplotypes and the most similar haplotype sequences
  #+HEADER: :results output graphics file
  #+HEADER: :file unique-haplotypes.png
  #+HEADER: :width 800 :height 400 :bg white
  #+begin_src R
haplotypes.with_outgroup.dist <-
  haplotypes.with_outgroup@sequence %>%
  as.DNAbin %>%
  dist.dna(model = 'N', as.matrix = T) %>%
  as.data.frame %>%
  rownames_to_column("Hap1") %>%
  gather(-Hap1, key="Hap2", value="Dist")

haplotypes.of.interest <- haplotypes.with_outgroup.dist %>%
  mutate(tmp=Hap1, Hap1=Hap2, Hap2=tmp) %>%
  select(-tmp) %>%
  rbind(haplotypes.with_outgroup.dist) %>%
  filter(grepl("mtCR.new", Hap1)) %>%
  filter(Dist <=  1) %>%
  unique

haplotypes.with_outgroup@sequence %>%
  t %>%
  as.data.frame %>%
  rowid_to_column("Pos") %>%
  gather(-Pos, key="Hap2", value="base") %>%
  right_join(haplotypes.of.interest,
             relationship = 'many-to-many') %>%
  group_by(Hap1, Pos ) %>%
  filter(length(unique(base)) > 1) %>%
  ungroup %>%
  ggplot(aes(Pos, Hap2, color=base)) +
  geom_text(aes(label=base)) +
  facet_grid(rows=vars(Hap1), space = 'free', scales = 'free',
             switch='y') +
  theme_bw() +
  theme(strip.text.y.left  = element_text(angle = 0),
        strip.placement = 'outside',
        legend.position = 'none',
        axis.title = element_blank())
  #+end_src

  #+RESULTS:
  [[file:unique-haplotypes.png]]


Plot pie chart
#+HEADER: :results output graphics file
#+HEADER: :file haplotype.without_outgroup.pie.png
#+HEADER: :width 800 :height 600 :bg white
#+begin_src R
haplotypes.with_outgroup@freq %>%
  as.data.frame(nm='Size') %>%
  group_by(Size) %>%
  count %>%
  ggplot(aes(x=1, n, fill=factor(Size))) +
  geom_col() +
  coord_polar(theta = 'y', direction = -1) +
  scale_fill_iwanthue() +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text.y = element_blank())

#+end_src

#+RESULTS:
[[file:haplotype.without_outgroup.pie.png]]

** Structure
1) convert to genlight
  #+begin_src R
snps.without_outgroup <- fasta2genlight(
  "2-haplotypes.without_outgroup.fixed.fasta",
  quiet = T,
  snpOnly=T)
snps.without_outgroup
  #+end_src

  #+RESULTS:
  #+begin_example
  /// GENLIGHT OBJECT /////////

   // 72 genotypes,  44 binary SNPs, size: 107.8 Kb
   43 (1.36 %) missing data

   // Basic content
     @gen: list of 72 SNPbin
     @ploidy: ploidy of each individual  (range: 1-1)

   // Optional content
     @ind.names:  72 individual labels
     @loc.all:  44 alleles
     @position: integer storing positions of the SNPs
     @other: a list containing: elements without names
  #+end_example
2) Convert =genlight= to =geno= format (a la =dartR=) and run =snmf=
  #+begin_src R :results silent
geno <- as.matrix(snps.without_outgroup)
geno[is.na(geno)] <- 9

## Remove constant snps
#geno <- geno[,apply(geno, 2, function(x) length(unique(x)) > 1)]

outfile <- "4-structure/haplotypes-fixed"
write.table(
  geno,
  paste(outfile, ".lfmm", sep = ""),
  col.names = FALSE,
  row.names = FALSE,
  sep = " "
)
## write geno
write.table(
  t(geno),
  paste(outfile, ".geno", sep = ""),
  col.names = FALSE,
  row.names = FALSE,
  sep = ""
)

## project <- snmf(paste0(outfile, ".geno"),
##                 K = 1:15,
##                 entropy = T,
##                 repetitions = 10,
##                 project = "new",
##                 ploidy=1,
##                 CPU = 4)

project <- load.snmfProject(paste0(outfile, ".snmfProject"))
#+end_src
3) PCA scree plot
   #+header: :results output graphics file
   #+header: :file 4-struct-scree.haplotypes-fixed.png
   #+header: :width 10 :height 4 :units in :res 100 :bg white
   #+begin_src R
pca.scree.plot <- pca(paste0(outfile, ".lfmm"), scale=T, K=15) %>%
  tracy.widom %>%
  ggplot(aes(N, percentage)) +
  geom_line() +
  geom_point() +
  scale_y_continuous(labels=scales::label_percent()) +
  labs(title = "PCA Scree Plot",
       x = "Principal Components",
       y = "Percentage of Variance") +
  theme_minimal()
pca.scree.plot
   #+end_src

   #+RESULTS:
   [[file:4-struct-scree.haplotypes-fixed.png]]
4) Cross-Entropy
   #+header: :results output graphics file
   #+header: :file 4-struct-entropy.haplotypes-fixed.png
   #+header: :width 10 :height 4 :units in :res 100 :bg white
   #+begin_src R
# Get best Ks by finding minimum min, mean, and max cross entropy
summary.info = summary(project)$crossEntropy

plot.entropy <- as.data.frame(t(summary.info)) %>%
  tibble::rownames_to_column("K") %>%
  mutate(K = as.numeric(substring(K, 4))) %>%
  ggplot(aes(K, min)) +
#  geom_ribbon(aes(ymin=min, ymax=max), alpha=0.2, color='grey70') +
#  geom_hline(aes(yintercept = min(summary.info[2,]), color = "red")) +
  geom_line(aes(x = K, y = min, group=1)) +
  geom_point() +
  labs(title = "Cross-entropy versus K",
       x = "Number of ancestral populations (K)",
       y = "Minimum Cross-entropy") +
  theme_minimal() +
  theme(legend.position = "none")
plot.entropy
  #+end_src

  #+RESULTS:
  [[file:4-struct-entropy.haplotypes-fixed.png]]
5) Combine scree and entropy plot
   #+header: :results output graphics file
   #+header: :file 4-struct-fig-K-fixed.png
   #+header: :width 8 :height 4 :units in :res 100 :bg white
   #+begin_src R
cowplot::plot_grid(pca.scree.plot, plot.entropy,
                   labels = LETTERS)
   #+end_src

   #+RESULTS:
   [[file:4-struct-fig-K-fixed.png]]
6) Get lowest entropy run for each K
   #+begin_src R :results output drawer
# Get best run for each K
best.runs <- lapply(project@runs, function(x)
  c(K=x@K, run=x@run, crossEntropy=x@crossEntropy)) %>%
  bind_rows() %>%
  mutate(K=as.integer(K),
         run=as.integer(run)) %>%
  group_by(K) %>%
  filter(crossEntropy ==min(crossEntropy)) %>%
  arrange(K)
ascii(best.runs, format = c("d", "d", "f"),
      digits=5, include.rownames = F)
  #+end_src

  #+RESULTS:
  :results:
  |  K | run | crossEntropy |
  |----+-----+--------------|
  |  1 |   8 |      0.20777 |
  |  2 |   8 |      0.13652 |
  |  3 |   8 |      0.08029 |
  |  4 |   8 |      0.08253 |
  |  5 |   8 |      0.07747 |
  |  6 |   8 |      0.08881 |
  |  7 |  10 |      0.13266 |
  |  8 |  10 |      0.14189 |
  |  9 |   5 |      0.17276 |
  | 10 |  10 |      0.16388 |
  | 11 |   2 |      0.17915 |
  | 12 |   8 |      0.23712 |
  | 13 |   7 |      0.20993 |
  | 14 |   2 |      0.18649 |
  | 15 |   8 |      0.18041 |
  :end:
7) Assign memberships for best run of each K

     #+begin_src R :results silent
admix.coefs <- mapply(Q, K=best.runs$K, run=best.runs$run,
                      MoreArgs = list(project)) %>%
  lapply(as.data.frame) %>%
  lapply(rowid_to_column, "ID") %>%
  bind_rows(.id="K") %>%
  gather(-K, -ID, key="pop", value="q") %>%
  filter(!is.na(q)) %>%
  mutate(pop = as.numeric(sub("V", "", pop)),
         K = as.numeric(K)) %>%
  group_by(K, ID) %>%
  reframe(K, ID, pop, q,
          best.pop=pop[which.max(q)],
          best.q = max(q))

   #+end_src
8) Structure membership graph
  #+header: :results output graphics file
  #+header: :file 4-struct-membership-haplotype-fixed.png
  #+header: :width 8 :height 4 :units in :res 100 :bg white
  #+begin_src R
 member.data <- filter(admix.coefs, K==4)
 member.data.order <- spread(member.data, pop, q) %>%
                        select(-ID, -K, -best.pop, -best.q) %>%
                        as.matrix %>%
                        dist %>%
                        hclust(method="ave") %>%
                        as.dendrogram %>%
                        order.dendrogram
 haplotypes.names <- row.names(geno)
 pop.labels <- sprintf("mtCR.%s",
                     c("sound", "inner", "outer", "ocean"))
 member.data <-  mutate(member.data,
                      ID = haplotypes.names[ID],
                      pop = factor(pop, c(1, 2, 3, 4),
                                   pop.labels),
                      best.pop = factor(best.pop, c(1, 2, 3, 4),
                                        pop.labels)) %>%
 mutate(ID = factor(ID, haplotypes.names[member.data.order] ))
 plot.structure <- ggplot(member.data, aes(ID, q, fill=pop)) +
 geom_col(width=1) +
 facet_grid(cols=vars(best.pop), scales="free", space="free",
            switch='x') +
 scale_fill_iwanthue() +
 scale_x_discrete(position = "top", expand = c(0,0)) +
 scale_y_continuous(labels=scales::label_percent(), expand = c(0,0))+
 theme_bw()+
 theme( axis.text.x = element_blank(),
       axis.title.x = element_blank(),
   legend.position = 'bottom')
 plot.structure

 #+end_src

 #+RESULTS:
 [[file:4-struct-membership-haplotype-fixed.png]]
9) Assign membership
   #+begin_src R
haplotype.membership <- haplotypes.with_outgroup@haplist %>%
  lapply(as.data.frame, nm='Acc') %>%
  bind_rows(.id="ID") %>%
  left_join(unique(select(member.data, ID, best.pop)),
                   by="ID")


write.table(haplotype.membership, "4-struct-membership.hap-fixed.txt",
            sep="\t", row.names=F)
   #+end_src

   #+RESULTS:
** Count Heatmap

#+begin_src R :results silent
anno <- haplotypes.with_outgroup@haplist %>%
  lapply(as.data.frame, nm='ID') %>%
  bind_rows(.id="name") %>%
  left_join(select(meta.counts, ID, Set, Group, count) %>%
  rbind(data.frame(ID = grep("SER",
                     row.names(fasta.with_outgroup.trimmed),
                     value=T),
           Set="New",
           Group="New",
           count = 1)) , by="ID") %>%
  group_by(name, Set, Group) %>%
  summarise(count = sum(count)) %>%
  rename("name"="ID") %>%
  left_join(unique(select(member.data, ID, best.pop))) %>%
  mutate(Set = ifelse(is.na(Set), "2021", Set),
         Group = if_else(is.na(Group), "blue", Group)) %>%
  mutate(
    ID = factor(ID, haplotypes.names[member.data.order] ),
    Group = factor(Group, c('NW.inner', 'E.inner', 'NW.outer',
                            'E.outer', 'NW.Oceanic', 'NE.oceanic',
                            'E.oceanic', 'green', 'blue', "New"))) %>%
  filter(!is.na(ID))

meta.counts %>%
  select(ID, Group, count) %>%
  spread(key=Group, value = count) %>%
  write.table("published-counts.txt")

write.table(anno, "haplotype.published-groups.txt",
            sep="\t", row.names=F)

#+end_src

#+header: :results output graphics file
#+header: :file haplotype-pop-membership-heatmap.png
#+header: :width 16 :height 4 :units in :res 100 :bg white
#+begin_src R
heatmap.plot <- ggplot(anno, aes(ID,Group)) +
  geom_tile(aes(fill=Group), na.rm=T) +
  geom_text(aes(label=count), na.rm=T) +
  facet_grid(rows=vars(Set), cols=vars(best.pop),
             scales="free", space="free") +
  scale_fill_manual( values=c(colors[['2021']],
                              colors[['2017']],
                              New="grey")) +
  scale_x_discrete(expand = c(0,0)) +
  theme_bw() +
  theme(axis.title = element_blank(),
        axis.text.x= element_text(angle = 90, hjust = 1, vjust = 0.5),
        legend.position = 'none')
heatmap.plot

#+end_src

#+RESULTS:
[[file:haplotype-pop-membership-heatmap.png]]

#+header: :results output graphics file
#+header: :file haplotype-pop-membership-barchart.png
#+header: :width 5 :height 6 :units in :res 200 :bg white
#+begin_src R
anno %>%
  group_by(Set, Group, best.pop) %>%
  summarise(count=sum(count)) %>%
  ggplot(aes(Group, count)) +
  geom_col(aes(fill=Group)) +
  geom_label(aes(label=count), y=10, fill='white') +
  facet_grid(cols=vars(Set), rows=vars(best.pop),
             scales="free", space="free") +
  scale_fill_manual( values=c(colors[['2021']],
                              colors[['2017']],
                              New="grey")) +
  scale_x_discrete(expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0), limits=c()) +
  coord_cartesian(y=c(0,75)) +
  theme_bw() +
  theme(axis.title = element_blank(),
        axis.text.x= element_text(angle = 25, hjust = 1,
                                  vjust = 1),
        legend.position = 'none')
#+end_src

#+RESULTS:
[[file:haplotype-pop-membership-barchart.png]]



** Phylogenetics tree

#+HEADER: :results output graphics file :file mtcr-nj-tree-fixed.png
#+header: :width 13.5 :height 15 :units in :res 200 :bg white
#+begin_src R :scale 2
tree.data <- haplotypes.with_outgroup@sequence %>%
  as.DNAbin %>%
  dist.dna %>%
  nj %>%
  root(outgroup=c("mtCR.out-1", "mtCR.out-2"))

tree <- ggtree(tree.data) +
  geom_tiplab(align=T, as_ylab=T) +
#  geom_nodelab(aes(label=node), bg="white") +
#  geom_tiplab(aes(label=node), bg="white") +
  ggtitle("(A) Neighboor-Joining Tree") +
  scale_x_continuous(breaks=seq(0.005, 0.05, 0.01)) +
  theme_tree2()
tree <- flip(tree, 97, 91)
tree <- flip(tree, 132, 117)

plot <- ggplot(anno, aes(Group, ID)) +
  geom_tile(aes(fill=Group), na.rm=T) +
  geom_text(aes(label=count), na.rm=T) +
  facet_grid(cols=vars(Set), scales="free", space="free") +
  scale_fill_manual( values=c(colors[['2021']],
                              colors[['2017']],
                              New="grey")) +
  ggtitle("(C) Haplotype Members") +
  theme_bw() +
  theme(axis.title = element_blank(),
        axis.text.y= element_text(),
        axis.text.x= element_text(angle = 25, hjust = 1),
        legend.position = 'none')

plot.structure <- right_join(member.data,
                             data.frame(ID=tree.data$tip.label)) %>%
  ggplot(aes(q, ID, fill=(pop))) +
  geom_col(width=1) +
  scale_fill_iwanthue(breaks=pop.labels, name="") +
#  scale_y_discrete(expand = c(0,0)) +
  scale_x_continuous(labels=scales::label_percent(),
                     breaks = c(0.25, 0.5, 0.75), expand = c(0,0))+
  ggtitle("(B) Population Structure") +
  theme_bw()+
  theme( axis.text.y = element_blank(),
        axis.title.y = element_blank(),
        axis.title.x = element_blank(),
    legend.position = c(0.48,1.015),
    legend.direction = "horizontal",
    legend.background = element_blank())

main.plot <- plot.structure  %>%
  insert_left(tree)%>%
  insert_right(plot)
options("aplot_guides" = "keep")
main.plot
      #+end_src

#+RESULTS:
[[file:mtcr-nj-tree-fixed.png]]
** Stats
1) Haplotype diversity

  #+begin_src R :results value table :colnames yes
library(pegas)

pegas.haps <- haplotypes::as.DNAbin(as.dna(haplotypes.with_outgroup))
pegas.haps <- pegas.haps[c(-73, -74),]
class(pegas.haps) <- c("haplotype", "DNAbin")
attr(pegas.haps, "index") <- haplotypes.with_outgroup@hapind
attr(pegas.haps, "from") <- "haps"

pegas.haps.split <-
  select(haplotype.membership,
                            "Haplotype"=ID,
                            "Population"=best.pop) %>%
  distinct %>%
  split(., .$Population) %>%
  lapply(pull, "Haplotype") %>%
  lapply(function(x) {
    haps <- pegas.haps[x,]
    class(haps) <- c("haplotype", "DNAbin")
    attr(haps, "index") <- haplotypes.with_outgroup@hapind[x]
    attr(haps, "from") <- "haps"
    haps
  })
pegas.haps.split[['all']] <- pegas.haps


lapply(pegas.haps.split, pegas::hap.div, variance = T) %>%
  lapply(setNames, c('Hap. Diversity', 'var')) %>%
  bind_rows(.id='Population') %>%
  mutate(Population = fct_relevel(factor(Population),
                                  c("all", pop.labels))) %>%
  arrange(Population)
  #+end_src

  #+RESULTS:
  | Population |    Hap. Diversity |                  var |
  |------------+-------------------+----------------------|
  | all        |  0.80832661831856 |  0.00020120894594653 |
  | mtCR.sound |  0.75622692375315 | 0.000267128534545299 |
  | mtCR.inner | 0.933823529411765 |  0.00149002681255929 |
  | mtCR.outer |  0.96969696969697 |    0.000440854139372 |
  | mtCR.ocean | 0.977941176470588 | 0.000742592387824971 |

2) Nucleotide Diversity (pi)
  #+begin_src R :results output drawer
lapply(pegas.haps.split, pegas::nuc.div, variance = T) %>%
  lapply(setNames, c('pi', 'var')) %>%
  bind_rows(.id='Population') %>%
  mutate(Population = fct_relevel(factor(Population),
                                  c("all", pop.labels))) %>%
  arrange(Population) %>%
  ascii(digits=c(0, 4, 3),
        format=c('s', 'f', 'e'),
        include.rownames = F)

  #+end_src

  #+RESULTS:
  :results:
  | Population |     pi |       var |
  |------------+--------+-----------|
  | all        | 0.0113 | 3.939e-05 |
  | mtCR.sound | 0.0037 | 6.681e-06 |
  | mtCR.inner | 0.0071 | 2.026e-05 |
  | mtCR.outer | 0.0081 | 2.430e-05 |
  | mtCR.ocean | 0.0087 | 2.818e-05 |
  Warning message:
  In ff * D : longer object length is not a multiple of shorter object length
  :end:

  :results:
  | Population |     pi |       var |
  |------------+--------+-----------|
  | all        | 0.0082 | 2.278e-05 |
  | mtCR.sound | 0.0037 | 6.681e-06 |
  | mtCR.inner | 0.0071 | 2.026e-05 |
  | mtCR.outer | 0.0083 | 2.536e-05 |
  | mtCR.ocean | 0.0087 | 2.818e-05 |
  :end:

3) Population differentiation (Fst)

   #+begin_src R
pop <- select(haplotype.membership, best.pop, ID) %>%
  unique() %>%
  pull(best.pop, name=ID) %>%
  as.character() %>%
  na.omit()
table(pop)

genind <- haplotypes.with_outgroup %>%
  as.dna %>%
  haplotypes::as.DNAbin(.) %>%
  .[!grepl("mtCR.out", labels(.)),] %>%
  DNAbin2genind(., pop=pop)
strata(genind) <- data.frame(pop)

library(hierfstat)
all <- wc(genind)
pair <- pairwise.WCfst(genind) %>%
  as.data.frame %>%
  rownames_to_column("PopA") %>%
  gather(-PopA, key="PopB", value="Fst") %>%
  filter(PopA < PopB) %>%
  mutate(class = cut(Fst, breaks=c(0,0.05,0.15,0.25,1),
                     labels=c("little", "moderate", "great",
                              "very great")))

pair[which.min(pair$Fst),]
pair[which.max(pair$Fst),]

rbind(c('all', 'all', all$FST, NA, use.names = F), pair)


  #+end_src

  #+RESULTS:
  #+begin_example
  pop
  mtCR.inner mtCR.ocean mtCR.outer mtCR.sound
          11         15         17         29
  PopA       PopB        Fst  class
  1 mtCR.inner mtCR.sound 0.03491665 little
  PopA       PopB        Fst    class
  4 mtCR.inner mtCR.ocean 0.09022254 moderate
  PopA       PopB                Fst    class
  1        all        all 0.0736455401213319     <NA>
  2 mtCR.inner mtCR.sound 0.0349166503050042   little
  3 mtCR.ocean mtCR.sound 0.0878138253249457 moderate
  4 mtCR.outer mtCR.sound  0.084389566389464 moderate
  5 mtCR.inner mtCR.ocean 0.0902225441714691 moderate
  6 mtCR.inner mtCR.outer 0.0775021813417108 moderate
  7 mtCR.ocean mtCR.outer 0.0643913887816393 moderate
  #+end_example

4) PhiST
   - Global
     #+begin_src R
ddp <- as.genclone(genind)
phistp <- poppr.amova(ddp, ~pop, filter=T, threshold=0.1)
phistp
    #+end_src

    #+RESULTS:
    #+begin_example
    Filtering ...
    Original multilocus genotypes   ... 73
    Contracted multilocus genotypes ... 73

    Found 90 missing values.

    2 loci contained missing values greater than 5%

    Removing 2 loci: 123, 275
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    $call
    ade4::amova(samples = xtab, distances = xdist, structures = xstruct)

    $results
                    Df   Sum Sq    Mean Sq
    Between samples  3 405.0490 135.016322
    Within samples  69 219.2688   3.177809
    Total           72 624.3178   8.671081

    $componentsofcovariance
                                    Sigma        %
    Variations  Between samples  7.562240  70.4116
    Variations  Within samples   3.177809  29.5884
    Total variations            10.740050 100.0000

    $statphi
                           Phi
    Phi-samples-total 0.704116
    #+end_example


   - Per Population
     #+begin_src R
set.seed(45243)
## pop[pop == '2'] <- paste0( pop[pop == '2'],
##          letters[sample.int(4, size = sum(pop==2), replace = T)])
pop <- factor(pop)
table(pop)

ddp <- as.genclone(genind)

phist.subset <- function(pop1, pop2) {
  pops <- popsub(ddp, sublist = c(pop1, pop2), drop=T)
  gc <- as.genclone(pops)
  phistsp <- poppr.amova(gc, ~pop, filter=T, threshold=0.1)
  return(unlist(phistsp$statphi))
}

phist.table <- expand_grid(pop1=levels(pop),
              pop2=levels(pop)) %>%
  rowwise() %>%
  mutate(phist = phist.subset(pop1, pop2)) %>%
  ungroup
    #+end_src

    #+RESULTS:
    #+begin_example
    pop
    mtCR.inner mtCR.ocean mtCR.outer mtCR.sound
            11         15         18         29
    Filtering ...
    Original multilocus genotypes   ... 11
    Contracted multilocus genotypes ... 11

     No missing values detected.

    Filtering ...
    Original multilocus genotypes   ... 26
    Contracted multilocus genotypes ... 26

    Found 15 missing values.

    1 locus contained missing values greater than 5%

    Removing 1 locus: , 123
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 29
    Contracted multilocus genotypes ... 29

    Found 42 missing values.

    2 loci contained missing values greater than 5%

    Removing 2 loci: 123, 275
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 40
    Contracted multilocus genotypes ... 40

     No missing values detected.

    Filtering ...
    Original multilocus genotypes   ... 26
    Contracted multilocus genotypes ... 26

    Found 15 missing values.

    1 locus contained missing values greater than 5%

    Removing 1 locus: , 123
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 15
    Contracted multilocus genotypes ... 15

     No missing values detected.

    Filtering ...
    Original multilocus genotypes   ... 33
    Contracted multilocus genotypes ... 33

    Found 24 missing values.

    1 locus contained missing values greater than 5%

    Removing 1 locus: , 275
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 44
    Contracted multilocus genotypes ... 44

    Found 30 missing values.

    1 locus contained missing values greater than 5%

    Removing 1 locus: , 123
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 29
    Contracted multilocus genotypes ... 29

    Found 42 missing values.

    2 loci contained missing values greater than 5%

    Removing 2 loci: 123, 275
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 33
    Contracted multilocus genotypes ... 33

    Found 24 missing values.

    1 locus contained missing values greater than 5%

    Removing 1 locus: , 275
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 18
    Contracted multilocus genotypes ... 18

    Found 12 missing values.

    1 locus contained missing values greater than 5%

    Removing 1 locus: , 275
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 47
    Contracted multilocus genotypes ... 47

    Found 60 missing values.

    2 loci contained missing values greater than 5%

    Removing 2 loci: 123, 275
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 40
    Contracted multilocus genotypes ... 40

     No missing values detected.

    Filtering ...
    Original multilocus genotypes   ... 44
    Contracted multilocus genotypes ... 44

    Found 30 missing values.

    1 locus contained missing values greater than 5%

    Removing 1 locus: , 123
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 47
    Contracted multilocus genotypes ... 47

    Found 60 missing values.

    2 loci contained missing values greater than 5%

    Removing 2 loci: 123, 275
    Distance matrix is non-euclidean.
    Using quasieuclid correction method. See ?quasieuclid for details.
    Filtering ...
    Original multilocus genotypes   ... 29
    Contracted multilocus genotypes ... 29

     No missing values detected.
    #+end_example


    #+begin_src R  :results drawer

phist.table %>%
  filter(pop1 != pop2) %>%
  group_by(pop1, pop2) %>%
  summarise( phist.all = paste(sprintf("%0.4f", phist),
                               collapse = " "),
            phist=mean(phist), .groups="drop") %>%
  arrange(phist.all) %>%
  ascii(digits=4)

    #+end_src

    #+RESULTS:
    :results:
    |    | pop1       | pop2       | phist.all |  phist |
    |----+------------+------------+-----------+--------|
    |  1 | mtCR.inner | mtCR.sound |    0.5338 | 0.5338 |
    |  2 | mtCR.sound | mtCR.inner |    0.5338 | 0.5338 |
    |  3 | mtCR.ocean | mtCR.outer |    0.6630 | 0.6630 |
    |  4 | mtCR.outer | mtCR.ocean |    0.6630 | 0.6630 |
    |  5 | mtCR.inner | mtCR.outer |    0.6954 | 0.6954 |
    |  6 | mtCR.outer | mtCR.inner |    0.6954 | 0.6954 |
    |  7 | mtCR.outer | mtCR.sound |    0.7328 | 0.7328 |
    |  8 | mtCR.sound | mtCR.outer |    0.7328 | 0.7328 |
    |  9 | mtCR.inner | mtCR.ocean |    0.7405 | 0.7405 |
    | 10 | mtCR.ocean | mtCR.inner |    0.7405 | 0.7405 |
    | 11 | mtCR.ocean | mtCR.sound |    0.7540 | 0.7540 |
    | 12 | mtCR.sound | mtCR.ocean |    0.7540 | 0.7540 |
    :end:

   - Private alleles
   #+begin_src R :results drawer
private.alleles <- private_alleles(genind) %>%
  t %>%
  as.data.frame %>%
  rownames_to_column("POS")
ascii(private.alleles, digits=0)

colSums(private.alleles > 0)
   #+end_src

   #+RESULTS:
   :results:
   |    | POS   | mtCR.inner | mtCR.sound | mtCR.ocean | mtCR.outer |
   |----+-------+------------+------------+------------+------------|
   |  1 | 23.g  |          0 |          0 |          1 |          0 |
   |  2 | 26.g  |          0 |          1 |          0 |          0 |
   |  3 | 27.t  |         10 |          0 |          0 |          0 |
   |  4 | 32.c  |          0 |          0 |         15 |          0 |
   |  5 | 33.t  |          1 |          0 |          0 |          0 |
   |  6 | 64.a  |          2 |          0 |          0 |          0 |
   |  7 | 73.c  |          0 |          2 |          0 |          0 |
   |  8 | 101.g |          1 |          0 |          0 |          0 |
   |  9 | 104.t |          0 |          1 |          0 |          0 |
   | 10 | 105.g |          0 |          0 |          0 |         11 |
   | 11 | 106.t |          0 |          1 |          0 |          0 |
   | 12 | 110.c |          0 |          0 |         15 |          0 |
   | 13 | 116.t |          1 |          0 |          0 |          0 |
   | 14 | 117.c |          0 |          0 |          1 |          0 |
   | 15 | 119.g |          0 |         29 |          0 |          0 |
   | 16 | 123.c |          0 |          1 |          0 |          0 |
   | 17 | 213.g |          1 |          0 |          0 |          0 |
   | 18 | 216.c |          1 |          0 |          0 |          0 |
   | 19 | 249.a |          0 |          0 |          0 |          1 |
   | 20 | 252.t |          0 |          0 |          2 |          0 |
   | 21 | 265.c |          0 |          0 |          1 |          0 |
   | 22 | 266.a |          0 |          0 |          0 |         18 |
   | 23 | 273.g |          0 |          2 |          0 |          0 |
   | 24 | 274.c |          0 |          0 |          0 |          2 |
   | 25 | 278.c |          0 |          1 |          0 |          0 |
   | 26 | 283.g |          0 |          1 |          0 |          0 |
   | 27 | 291.g |          1 |          0 |          0 |          0 |
   | 28 | 294.c |          1 |          0 |          0 |          0 |
   | 29 | 295.t |          0 |          0 |          0 |          1 |
   | 30 | 306.c |          0 |          0 |          0 |          1 |
          POS mtCR.inner mtCR.sound mtCR.ocean mtCR.outer
           30          9          9          6          6
   :end:
